name: E2E Tests

on:
  workflow_run:
    workflows: ["Test and Build"]
    branches: [main]
    types: 
      - completed

jobs:
  e2e:
    name: e2e
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    env:
      IMG_BASE: drzzlio/kms-issuer
      CERT_MANAGER_VERSION: v1.13.5
    steps:
      - uses: actions/checkout@v4.1.1

      - name: Set IMG env var
        run: echo "IMG=${IMG_BASE}:sha-`echo ${GITHUB_SHA} | cut -c1-8`" >> $GITHUB_ENV

      # Build testing docker image
      - name: Build the testing kms-issuer docker image
        run: docker build -t ${IMG} .

      # Setup kind cluster
      - name: Create k8s Kind Cluster
        uses: helm/kind-action@v1.9.0
        with:
          cluster_name: kind
      - name: Load test docker image into the kind cluster
        run: kind load docker-image ${IMG}

      # Install local-kms to the cluster
      - name: Create local-kms namespace
        run: kubectl create namespace local-kms
      - name: Create local-kms deployment
        run: kubectl create deployment local-kms -n local-kms --port 8080 --image nsmithuk/local-kms:3.11.2
      - name: Create local-kms service
        run: kubectl expose deployment local-kms -n local-kms --port 8080
      - name: Wait for local-kms pod to be ready
        run: kubectl wait --for=condition=Ready -l app=local-kms -n local-kms pod

      - name: Install cert-manager
        run: kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/${CERT_MANAGER_VERSION}/cert-manager.yaml

      - uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Install kms-issuer CRDs
        run: make install

      - name: Set docker image to use in Kustomization
        run: make kustomize && cd config/manager && kustomize edit set image controller=${IMG}
      - name: Deploy kms-issuer
        run: kustomize build config/testing | kubectl apply -f -

      - name: Apply KMSIssuer from sample
        run: kubectl apply -f ./config/samples/cert-manager_v1alpha1_kmsissuer.yaml
      - name: Wait for KMSIssuer to be ready
        run: kubectl wait --for=condition=Ready kmsissuer/kms-issuer-sample

      - name: Apply Certificate from sample
        run: kubectl apply -f ./config/samples/certificate.yaml
      - name: Wait for Certificate to be ready  
        run: kubectl wait --for=condition=Ready certificate.cert-manager.io/example-com

      - name: Delete certificate
        run: kubectl delete -f ./config/samples/certificate.yaml
      - name: Delete KMSIssuer
        run: kubectl delete -f ./config/samples/cert-manager_v1alpha1_kmsissuer.yaml

      - name: Logs of controller
        if: always()
        run: |
          echo "::group::Controller logs"
          kubectl logs deployment/kms-issuer-controller-manager -n kms-issuer-system --all-containers
          echo "::endgroup::"
